{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 \ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection \ud83c\udff9 Motivation Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics). \u2696 1. Theoretical Foundation \ud83d\udcdc Equations of Motion A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws. \ud83d\udd39 Horizontal Motion Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] \ud83d\udd39 Vertical Motion The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight . \ud83d\udccf 2. Analysis of the Range The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\] \ud83d\udccc Key Observations: Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon). \ud83c\udf0e 3. Practical Applications Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity. \ud83d\udcbb 4. Implementation (Python Simulation) Below is a Python script to simulate the projectile range as a function of \\( \\theta \\) : import numpy as np import matplotlib.pyplot as plt # Constants v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravity (m/s\u00b2) # Angles from 0 to 90 degrees theta = np.linspace(0, 90, 100) theta_rad = np.radians(theta) # Convert to radians # Compute range for each angle R = (v0**2 / g) * np.sin(2 * theta_rad) # Plot results plt.figure(figsize=(8, 5)) plt.plot(theta, R, label=r'Range $R = \\frac{v_0^2}{g} \\sin 2\\theta$', color='b') plt.axvline(45, linestyle=\"--\", color=\"r\", label=r'Maximum at $\\theta = 45^\\circ$') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show() \ud83d\udcca 5. Results and Discussion \ud83d\udd39 Graph Interpretation The maximum range occurs at \\( \\theta = 45^\\circ \\) . The function is symmetric about \\( 45^\\circ \\) . Higher \\( v_0 \\) increases range quadratically. \ud83d\udd39 Limitations of the Model Assumes no air resistance . Assumes flat terrain (ignores hills, obstacles). Ignores wind effects , which can alter trajectories. \ud83d\udd39 Enhancements Add air drag to create more realistic simulations. Consider launches from elevated platforms (e.g., artillery firing from a hill). \ud83c\udfaf Conclusion This study shows how the range of a projectile depends on launch angle, initial velocity, and gravity. The ideal case follows the classic \\( R = \\frac{v_0^2}{g} \\sin 2\\theta \\) relation, peaking at \\( 45^\\circ \\) . However, real-world factors like air resistance modify this behavior, making computational modeling essential for accurate predictions. Would you like me to extend the model with air resistance or non-flat terrain? \ud83d\ude80","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#mechanics-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"\ud83d\udccc Mechanics: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion appears simple, yet it encapsulates deep physical principles. By analyzing how the range of a projectile varies with its launch angle, we uncover fascinating relationships governed by linear and quadratic equations. These equations have broad applications, from sports (e.g., the trajectory of a soccer ball) to engineering (e.g., missile launch dynamics).","title":"\ud83c\udff9 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"A projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) follows a parabolic trajectory under the influence of gravity. We derive its motion using Newton's laws.","title":"\ud83d\udcdc Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"Since there is no acceleration in the horizontal direction (assuming no air resistance), the velocity remains constant: \\[ x(t) = v_0 \\cos\\theta \\cdot t \\]","title":"\ud83d\udd39 Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The vertical motion is governed by constant acceleration due to gravity \\( g \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] The projectile reaches the ground when \\( y = 0 \\) , solving for \\( t \\) : \\[ t_f = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the total time of flight .","title":"\ud83d\udd39 Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) is the horizontal distance covered by the projectile when it lands: \\[ R = x(t_f) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} \\] Using the identity \\( 2\\sin\\theta\\cos\\theta = \\sin 2\\theta \\) , we get: \\[ R = \\frac{v_0^2}{g} \\sin 2\\theta \\]","title":"\ud83d\udccf 2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Maximum Range: The range is maximized when \\( \\sin 2\\theta = 1 \\) , i.e., \\( 2\\theta = 90^\\circ \\) \u2192 \\( \\theta = 45^\\circ \\) . Symmetry: The function \\( R(\\theta) \\) is symmetric around \\( 45^\\circ \\) , meaning \\( R(\\theta) = R(90^\\circ - \\theta) \\) . Effect of Initial Velocity: Since \\( R \\propto v_0^2 \\) , doubling \\( v_0 \\) quadruples the range. Effect of Gravity: Since \\( R \\propto \\frac{1}{g} \\) , projectiles travel farther on planets with lower gravity (e.g., the Moon).","title":"\ud83d\udccc Key Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Soccer: Kicking a ball at \\( 45^\\circ \\) for maximum distance. Basketball: Analyzing the optimal shooting angle. Engineering & Ballistics: Missile trajectories and range optimization. Water fountains and fluid mechanics. Astrophysics: Moon landings require adjusting launch angles based on gravity.","title":"\ud83c\udf0e 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"Below is a Python script to simulate the projectile range as a function of \\( \\theta \\) : import numpy as np import matplotlib.pyplot as plt # Constants v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravity (m/s\u00b2) # Angles from 0 to 90 degrees theta = np.linspace(0, 90, 100) theta_rad = np.radians(theta) # Convert to radians # Compute range for each angle R = (v0**2 / g) * np.sin(2 * theta_rad) # Plot results plt.figure(figsize=(8, 5)) plt.plot(theta, R, label=r'Range $R = \\frac{v_0^2}{g} \\sin 2\\theta$', color='b') plt.axvline(45, linestyle=\"--\", color=\"r\", label=r'Maximum at $\\theta = 45^\\circ$') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.legend() plt.grid() plt.show()","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-results-and-discussion","text":"","title":"\ud83d\udcca 5. Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graph-interpretation","text":"The maximum range occurs at \\( \\theta = 45^\\circ \\) . The function is symmetric about \\( 45^\\circ \\) . Higher \\( v_0 \\) increases range quadratically.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-the-model","text":"Assumes no air resistance . Assumes flat terrain (ignores hills, obstacles). Ignores wind effects , which can alter trajectories.","title":"\ud83d\udd39 Limitations of the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#enhancements","text":"Add air drag to create more realistic simulations. Consider launches from elevated platforms (e.g., artillery firing from a hill).","title":"\ud83d\udd39 Enhancements"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This study shows how the range of a projectile depends on launch angle, initial velocity, and gravity. The ideal case follows the classic \\( R = \\frac{v_0^2}{g} \\sin 2\\theta \\) relation, peaking at \\( 45^\\circ \\) . However, real-world factors like air resistance modify this behavior, making computational modeling essential for accurate predictions. Would you like me to extend the model with air resistance or non-flat terrain? \ud83d\ude80","title":"\ud83c\udfaf Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfd7 Motivation The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force , we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations. \u2696 1. Theoretical Foundation \ud83d\udcdc Equation of Motion The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator . \ud83d\udccc Resonance Condition Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety . \ud83d\udcca 2. Analysis of Dynamics \ud83d\udd39 Effect of Damping ( \\( \\gamma \\) ) Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations. \ud83d\udd39 Effect of Driving Amplitude ( \\( A \\) ) Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies. \ud83d\udd39 Effect of Driving Frequency ( \\( \\omega \\) ) When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos. \ud83c\udf0d 3. Practical Applications Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum. \ud83d\udcbb 4. Implementation (Python Simulation) Below is a Python script that simulates the motion of a forced damped pendulum using numerical integration (Runge-Kutta method) . \ud83d\udccc Step 1: Install Required Libraries Before running the code, install NumPy and Matplotlib if needed: pip install numpy matplotlib scipy \ud83d\udccc Step 2: Python Code for Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) gamma = 0.2 # Damping coefficient A = 1.5 # Driving amplitude omega = 2.0 # Driving frequency # Define natural frequency omega_0 = np.sqrt(g / L) # Define the equations of motion def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions: theta = 0.2 rad, omega = 0 rad/s y0 = [0.2, 0] # Time span for simulation t_span = (0, 50) t_eval = np.linspace(0, 50, 1000) # Solve ODE using Runge-Kutta method sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract results t = sol.t theta = sol.y[0] # Plot results plt.figure(figsize=(10, 5)) plt.plot(t, theta, label=r'$\\theta(t)$', color='b') plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show() \ud83d\udcca 5. Results and Discussion \ud83d\udd39 Graph Interpretation At low damping ( \\( \\gamma \\ll 1 \\) ), large oscillations appear due to resonance. At high forcing amplitude ( \\( A \\gg 1 \\) ), the motion becomes irregular and chaotic. At specific frequencies ( \\( \\omega \\approx \\omega_0 \\) ), resonance occurs. \ud83d\udd39 Phase Space Analysis (Pendulum Motion in Phase Space) To visualize chaotic behavior, we can plot phase portraits ( \\( \\theta \\) vs. \\( \\dot{\\theta} \\) ): plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], color='purple') plt.xlabel(r\"$\\theta$ (rad)\") plt.ylabel(r\"$\\dot{\\theta}$ (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.grid() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83d\udccc Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a fascinating system that exhibits a range of behaviors, from simple oscillations to chaotic motion. By introducing damping and an external periodic force , we observe a transition from regular periodic motion to resonance, quasiperiodicity, and chaos . This system is crucial for understanding: - Resonance in mechanical systems (e.g., bridges, buildings under periodic stress). - Nonlinear dynamics and chaos theory (e.g., weather patterns, heart rhythms). - Energy harvesting from oscillations.","title":"\ud83c\udfd7 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#equation-of-motion","text":"The forced damped pendulum follows the nonlinear differential equation: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] where: - \\( \\theta \\) = angular displacement - \\( \\gamma \\) = damping coefficient - \\( \\omega_0 \\) = natural frequency of the pendulum ( \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) ) - \\( A \\) = amplitude of the external driving force - \\( \\omega \\) = driving frequency For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] which resembles the equation of a driven damped harmonic oscillator .","title":"\ud83d\udcdc Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) , leading to maximum energy absorption and large oscillations: \\[ \\omega_{\\text{res}} \\approx \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}} \\] At resonance, even small driving forces can produce large oscillations, which is crucial in mechanical engineering and structural safety .","title":"\ud83d\udccc Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"\ud83d\udcca 2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-damping-gamma","text":"Low damping: The pendulum exhibits large oscillations and resonance. High damping: The system stabilizes quickly with reduced oscillations.","title":"\ud83d\udd39 Effect of Damping (\\( \\gamma \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-amplitude-a","text":"Low amplitude: The pendulum undergoes periodic motion. High amplitude: The system transitions into chaotic motion for certain frequencies.","title":"\ud83d\udd39 Effect of Driving Amplitude (\\( A \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#effect-of-driving-frequency-omega","text":"When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. When \\( \\omega \\) is far from \\( \\omega_0 \\) , the response is weak. Nonlinear behavior emerges at certain parameter values, leading to chaos.","title":"\ud83d\udd39 Effect of Driving Frequency (\\( \\omega \\))"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Engineering & Structural Dynamics Bridges & Skyscrapers: Understanding how periodic forces (e.g., wind, earthquakes) affect large structures. Vibration Isolation: Designing materials that minimize resonance effects. Energy Harvesting Pendulum-based generators: Extracting energy from periodic motion. Ocean wave energy devices. Chaos Theory & Climate Models Weather prediction models involve nonlinear oscillatory behaviors similar to the forced pendulum.","title":"\ud83c\udf0d 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"Below is a Python script that simulates the motion of a forced damped pendulum using numerical integration (Runge-Kutta method) .","title":"\ud83d\udcbb 4. Implementation (Python Simulation)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-1-install-required-libraries","text":"Before running the code, install NumPy and Matplotlib if needed: pip install numpy matplotlib scipy","title":"\ud83d\udccc Step 1: Install Required Libraries"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-2-python-code-for-simulation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define system parameters g = 9.81 # Gravity (m/s\u00b2) L = 1.0 # Length of pendulum (m) gamma = 0.2 # Damping coefficient A = 1.5 # Driving amplitude omega = 2.0 # Driving frequency # Define natural frequency omega_0 = np.sqrt(g / L) # Define the equations of motion def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions: theta = 0.2 rad, omega = 0 rad/s y0 = [0.2, 0] # Time span for simulation t_span = (0, 50) t_eval = np.linspace(0, 50, 1000) # Solve ODE using Runge-Kutta method sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract results t = sol.t theta = sol.y[0] # Plot results plt.figure(figsize=(10, 5)) plt.plot(t, theta, label=r'$\\theta(t)$', color='b') plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show()","title":"\ud83d\udccc Step 2: Python Code for Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-results-and-discussion","text":"","title":"\ud83d\udcca 5. Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#graph-interpretation","text":"At low damping ( \\( \\gamma \\ll 1 \\) ), large oscillations appear due to resonance. At high forcing amplitude ( \\( A \\gg 1 \\) ), the motion becomes irregular and chaotic. At specific frequencies ( \\( \\omega \\approx \\omega_0 \\) ), resonance occurs.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-space-analysis-pendulum-motion-in-phase-space","text":"To visualize chaotic behavior, we can plot phase portraits ( \\( \\theta \\) vs. \\( \\dot{\\theta} \\) ): plt.figure(figsize=(6,6)) plt.plot(sol.y[0], sol.y[1], color='purple') plt.xlabel(r\"$\\theta$ (rad)\") plt.ylabel(r\"$\\dot{\\theta}$ (rad/s)\") plt.title(\"Phase Portrait of the Forced Damped Pendulum\") plt.grid() plt.show()","title":"\ud83d\udd39 Phase Space Analysis (Pendulum Motion in Phase Space)"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \ud83c\udf0d Orbital Period and Orbital Radius \ud83c\udfd7 Motivation Kepler's Third Law is a fundamental principle of celestial mechanics , stating that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius. This law, derived from Newton's Law of Universal Gravitation , is crucial for: - Understanding planetary motion and exoplanet detection - Designing satellite orbits - Calculating masses of celestial bodies By deriving and simulating this relationship, we gain insight into the governing laws of planetary systems. \u2696 1. Theoretical Foundation \ud83d\udcdc Derivation of Kepler\u2019s Third Law For a body in circular orbit around a much larger mass (e.g., a planet around a star), the gravitational force provides the necessary centripetal force : \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] Using Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] where: - \\( G \\) = Gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) ) - \\( M \\) = Mass of the central body (e.g., Sun, Earth) - \\( m \\) = Mass of the orbiting body - \\( r \\) = Orbital radius The centripetal force needed to maintain circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Since \\( F_{\\text{gravity}} = F_{\\text{centripetal}} \\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) and solving for velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] The orbital period \\( T \\) is the time taken to complete one orbit: \\[ T = \\frac{\\text{circumference}}{\\text{velocity}} = \\frac{2\\pi r}{v} \\] Substituting \\( v = \\sqrt{\\frac{G M}{r}} \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] \ud83d\udd39 Kepler\u2019s Third Law (Final Form) \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This shows that \\( T^2 \\) is proportional to \\( r^3 \\) : \\[ T^2 \\propto r^3 \\] \ud83d\udd39 Implications: - Larger orbits = Longer periods - Planets farther from the Sun move slower - The mass of the central body can be determined from orbital data \ud83c\udf0d 2. Real-World Examples 1. Earth's Moon Distance: \\( r = 3.844 \\times 10^8 \\) m Period: \\( T = 27.3 \\) days Using Kepler\u2019s Law, we can estimate Earth\u2019s mass. 2. Planets in the Solar System If we take Earth\u2019s orbit as a reference ( \\( r = 1 \\) AU, \\( T = 1 \\) year), then for any planet: \\[ \\frac{T_{\\text{planet}}^2}{r_{\\text{planet}}^3} \\approx 1 \\] This relationship helps predict unknown orbital parameters of newly discovered planets. \ud83d\udcbb 3. Implementation (Python Simulation) We\u2019ll verify Kepler\u2019s Third Law using numerical simulations. \ud83d\udccc Step 1: Install Dependencies Ensure NumPy and Matplotlib are installed: pip install numpy matplotlib \ud83d\udccc Step 2: Python Code for Simulation import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_sun = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Define orbital radii (in AU) for planets r_values_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) # Mercury to Neptune r_values_m = r_values_AU * AU # Convert to meters # Compute orbital periods using Kepler's Law T_values_s = 2 * np.pi * np.sqrt(r_values_m**3 / (G * M_sun)) # In seconds T_values_years = T_values_s / (60 * 60 * 24 * 365) # Convert to years # Plot T\u00b2 vs. r\u00b3 to verify Kepler's Law plt.figure(figsize=(8, 5)) plt.plot(r_values_m**3, T_values_s**2, 'bo', label=\"Planets (Simulated Data)\") # Best-fit line (Kepler\u2019s relation) coeff = np.polyfit(r_values_m**3, T_values_s**2, 1) kepler_fit = np.poly1d(coeff) plt.plot(r_values_m**3, kepler_fit(r_values_m**3), 'r--', label=\"Kepler's Law Fit\") # Labels and title plt.xlabel(r\"Orbital Radius Cubed ($r^3$) [m\u00b3]\") plt.ylabel(r\"Orbital Period Squared ($T^2$) [s\u00b2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show() \ud83d\udcca 4. Results and Discussion \ud83d\udd39 Graph Interpretation The data points align with a straight line , confirming \\( T^2 \\propto r^3 \\) . The best-fit line follows Kepler\u2019s predicted trend , verifying the law experimentally. \ud83d\udd39 Applications of Kepler\u2019s Law Finding Exoplanets : Measuring a planet\u2019s orbital period allows astronomers to estimate its distance from its star . Space Missions : Used in designing satellite orbits (e.g., GPS, geostationary satellites). \ud83d\udd39 Limitations Kepler\u2019s Law assumes circular orbits , but real orbits are elliptical . External forces (e.g., other planets\u2019 gravity) can slightly alter orbits . \ud83d\ude80 5. Extensions and Future Work Simulating elliptical orbits using Newton\u2019s second law numerically. Adding perturbations from additional celestial bodies (e.g., Jupiter\u2019s influence on Mars). Modeling binary star systems where both masses influence the motion. g","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"\ud83c\udf0d Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law is a fundamental principle of celestial mechanics , stating that the square of a planet\u2019s orbital period is proportional to the cube of its orbital radius. This law, derived from Newton's Law of Universal Gravitation , is crucial for: - Understanding planetary motion and exoplanet detection - Designing satellite orbits - Calculating masses of celestial bodies By deriving and simulating this relationship, we gain insight into the governing laws of planetary systems.","title":"\ud83c\udfd7 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"\u2696 1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"For a body in circular orbit around a much larger mass (e.g., a planet around a star), the gravitational force provides the necessary centripetal force : \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] Using Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] where: - \\( G \\) = Gravitational constant ( \\(6.674 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) ) - \\( M \\) = Mass of the central body (e.g., Sun, Earth) - \\( m \\) = Mass of the orbiting body - \\( r \\) = Orbital radius The centripetal force needed to maintain circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Since \\( F_{\\text{gravity}} = F_{\\text{centripetal}} \\) : \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Canceling \\( m \\) and solving for velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] The orbital period \\( T \\) is the time taken to complete one orbit: \\[ T = \\frac{\\text{circumference}}{\\text{velocity}} = \\frac{2\\pi r}{v} \\] Substituting \\( v = \\sqrt{\\frac{G M}{r}} \\) : \\[ T = \\frac{2\\pi r}{\\sqrt{\\frac{G M}{r}}} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\]","title":"\ud83d\udcdc Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-final-form","text":"\\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This shows that \\( T^2 \\) is proportional to \\( r^3 \\) : \\[ T^2 \\propto r^3 \\] \ud83d\udd39 Implications: - Larger orbits = Longer periods - Planets farther from the Sun move slower - The mass of the central body can be determined from orbital data","title":"\ud83d\udd39 Kepler\u2019s Third Law (Final Form)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-real-world-examples","text":"","title":"\ud83c\udf0d 2. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-earths-moon","text":"Distance: \\( r = 3.844 \\times 10^8 \\) m Period: \\( T = 27.3 \\) days Using Kepler\u2019s Law, we can estimate Earth\u2019s mass.","title":"1. Earth's Moon"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-planets-in-the-solar-system","text":"If we take Earth\u2019s orbit as a reference ( \\( r = 1 \\) AU, \\( T = 1 \\) year), then for any planet: \\[ \\frac{T_{\\text{planet}}^2}{r_{\\text{planet}}^3} \\approx 1 \\] This relationship helps predict unknown orbital parameters of newly discovered planets.","title":"2. Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-implementation-python-simulation","text":"We\u2019ll verify Kepler\u2019s Third Law using numerical simulations.","title":"\ud83d\udcbb 3. Implementation (Python Simulation)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-install-dependencies","text":"Ensure NumPy and Matplotlib are installed: pip install numpy matplotlib","title":"\ud83d\udccc Step 1: Install Dependencies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-python-code-for-simulation","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_sun = 1.989e30 # Mass of the Sun (kg) AU = 1.496e11 # 1 Astronomical Unit in meters # Define orbital radii (in AU) for planets r_values_AU = np.array([0.39, 0.72, 1.0, 1.52, 5.2, 9.58, 19.18, 30.07]) # Mercury to Neptune r_values_m = r_values_AU * AU # Convert to meters # Compute orbital periods using Kepler's Law T_values_s = 2 * np.pi * np.sqrt(r_values_m**3 / (G * M_sun)) # In seconds T_values_years = T_values_s / (60 * 60 * 24 * 365) # Convert to years # Plot T\u00b2 vs. r\u00b3 to verify Kepler's Law plt.figure(figsize=(8, 5)) plt.plot(r_values_m**3, T_values_s**2, 'bo', label=\"Planets (Simulated Data)\") # Best-fit line (Kepler\u2019s relation) coeff = np.polyfit(r_values_m**3, T_values_s**2, 1) kepler_fit = np.poly1d(coeff) plt.plot(r_values_m**3, kepler_fit(r_values_m**3), 'r--', label=\"Kepler's Law Fit\") # Labels and title plt.xlabel(r\"Orbital Radius Cubed ($r^3$) [m\u00b3]\") plt.ylabel(r\"Orbital Period Squared ($T^2$) [s\u00b2]\") plt.title(\"Verification of Kepler's Third Law\") plt.legend() plt.grid() plt.show()","title":"\ud83d\udccc Step 2: Python Code for Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-results-and-discussion","text":"","title":"\ud83d\udcca 4. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#graph-interpretation","text":"The data points align with a straight line , confirming \\( T^2 \\propto r^3 \\) . The best-fit line follows Kepler\u2019s predicted trend , verifying the law experimentally.","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications-of-keplers-law","text":"Finding Exoplanets : Measuring a planet\u2019s orbital period allows astronomers to estimate its distance from its star . Space Missions : Used in designing satellite orbits (e.g., GPS, geostationary satellites).","title":"\ud83d\udd39 Applications of Kepler\u2019s Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#limitations","text":"Kepler\u2019s Law assumes circular orbits , but real orbits are elliptical . External forces (e.g., other planets\u2019 gravity) can slightly alter orbits .","title":"\ud83d\udd39 Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extensions-and-future-work","text":"Simulating elliptical orbits using Newton\u2019s second law numerically. Adding perturbations from additional celestial bodies (e.g., Jupiter\u2019s influence on Mars). Modeling binary star systems where both masses influence the motion. g","title":"\ud83d\ude80 5. Extensions and Future Work"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 \ud83c\udf0d 1. Simulating a Spacecraft's Escape Trajectory We'll numerically integrate the equations of motion to simulate a spacecraft escaping Earth, Mars, or Jupiter. \ud83d\udccc Step 1: Equations of Motion A spacecraft follows Newton\u2019s Second Law : \\[ F = m a \\] For gravitational force : \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] By Newton's Second Law: \\[ a = \\frac{F}{m} = \\frac{GM}{r^2} \\] Since acceleration is a function of distance \\( r \\) , we integrate: \\[ \\frac{d^2 r}{dt^2} = -\\frac{GM}{r^2} \\] This will be solved numerically using Runge-Kutta (RK4) integration . \ud83d\udcbb 2. Python Implementation: Spacecraft Escape Simulation \ud83d\ude80 Code: Spacecraft Escape from Earth import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_earth = 5.97e24 # Mass of Earth (kg) R_earth = 6.37e6 # Radius of Earth (m) v_escape = np.sqrt(2 * G * M_earth / R_earth) # Escape velocity (m/s) # Initial conditions r0 = R_earth # Start at Earth's surface v0 = 1.1 * v_escape # Slightly above escape velocity (scaled) t_max = 15000 # Simulation time in seconds # Define differential equations (dr/dt = v, dv/dt = -GM/r^2) def equations(t, y): r, v = y a = -G * M_earth / r**2 # Acceleration due to gravity return [v, a] # Solve using Runge-Kutta method t_span = (0, t_max) y0 = [r0, v0] # Initial position and velocity sol = solve_ivp(equations, t_span, y0, t_eval=np.linspace(0, t_max, 1000)) # Extract results time = sol.t radius = sol.y[0] / 1000 # Convert to km velocity = sol.y[1] / 1000 # Convert to km/s # Plot results fig, ax1 = plt.subplots(figsize=(8, 5)) # Plot radius over time ax1.plot(time, radius, 'b', label=\"Distance from Earth\") ax1.set_xlabel(\"Time (s)\") ax1.set_ylabel(\"Distance from Earth (km)\", color='b') ax1.tick_params(axis='y', labelcolor='b') # Create a second y-axis for velocity ax2 = ax1.twinx() ax2.plot(time, velocity, 'r', label=\"Velocity\") ax2.set_ylabel(\"Velocity (km/s)\", color='r') ax2.tick_params(axis='y', labelcolor='r') # Titles and legend plt.title(\"Spacecraft Escape Trajectory from Earth\") fig.tight_layout() plt.show() \ud83d\udcca 3. Results and Discussion \ud83d\udd39 Graph Interpretation Blue curve : Distance from Earth increases over time \u2192 successful escape . Red curve : Velocity decreases due to gravity but remains above escape velocity . \ud83d\udd39 Spacecraft Considerations If initial velocity is below \\( v_2 \\) , the spacecraft falls back. If velocity is exactly \\( v_2 \\) , it will asymptotically escape (speed \u2192 0 at infinity). Higher velocities reduce travel time but require more fuel. \ud83d\udef8 4. Extending to Interstellar Travel Once a spacecraft escapes Earth , it must also escape the Sun to leave the Solar System. \ud83d\udd39 Third Cosmic Velocity (Interstellar Escape) \\[ v_3 = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\text{Earth}}}} \\] Using Sun\u2019s gravity at Earth\u2019s distance : [ approx 42.1 km/s ] \ud83d\ude80 Example: Voyager 1 Launched: 1977 Speed: 17.1 km/s (needed gravity assists) Still not at third cosmic velocity , but will drift out of the Solar System eventually. \ud83c\udf0d 5. Gravity Assist (Slingshot Effect) Instead of using massive fuel, gravity assists use planetary motion to boost spacecraft speed. \ud83d\udd39 Concept A spacecraft approaching a moving planet can \"steal\" some of its orbital energy : \\[ v_{\\text{final}} = v_{\\text{initial}} + 2 v_{\\text{planet}} \\] \ud83d\ude80 Example: Voyager Missions Used Jupiter & Saturn to gain speed. Saved tons of fuel , making deep-space missions possible. \ud83d\udcbb 6. Python Simulation: Gravity Assist We'll model a spacecraft using Jupiter\u2019s gravity for a speed boost. # Jupiter parameters M_jupiter = 1.90e27 # kg R_jupiter = 6.99e7 # m v_jupiter = 13.1e3 # Jupiter's orbital velocity (m/s) r_flyby = R_jupiter + 5e7 # Flyby altitude # Initial velocity before encounter v_incoming = 10e3 # 10 km/s towards Jupiter # Calculate final velocity using gravity assist equation v_outgoing = v_incoming + 2 * v_jupiter # Print results print(f\"Incoming Velocity: {v_incoming / 1000:.2f} km/s\") print(f\"Outgoing Velocity (after slingshot): {v_outgoing / 1000:.2f} km/s\") \ud83d\udcca 7. Results and Discussion \ud83d\udd39 Gravity Assist Interpretation Before encounter: 10 km/s After assist: ~36.2 km/s \ud83d\ude80 Boost of 26.2 km/s! (saving tons of fuel) \ud83d\udd39 Applications of Gravity Assists Used by Voyager, Cassini, New Horizons, Parker Solar Probe . Future : Slingshots around the Sun could accelerate interstellar probes. \ud83d\ude80 8. Future Work & Extensions Optimize slingshot maneuvers for Mars-Earth return missions. Simulate long-term trajectories (e.g., Starshot Probes). Model relativistic effects for high-speed interstellar travel. \ud83c\udf0c Final Thoughts We\u2019ve covered: \u2705 Escape trajectories \ud83c\udf0d \u2192 \ud83d\ude80 \u2705 Interstellar travel challenges \ud83d\ude80\ud83c\udf0c \u2705 Gravity assists for speed boosts \ud83d\ude80\u2728","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-simulating-a-spacecrafts-escape-trajectory","text":"We'll numerically integrate the equations of motion to simulate a spacecraft escaping Earth, Mars, or Jupiter.","title":"\ud83c\udf0d 1. Simulating a Spacecraft's Escape Trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_2/#step-1-equations-of-motion","text":"A spacecraft follows Newton\u2019s Second Law : \\[ F = m a \\] For gravitational force : \\[ F_{\\text{gravity}} = \\frac{GMm}{r^2} \\] By Newton's Second Law: \\[ a = \\frac{F}{m} = \\frac{GM}{r^2} \\] Since acceleration is a function of distance \\( r \\) , we integrate: \\[ \\frac{d^2 r}{dt^2} = -\\frac{GM}{r^2} \\] This will be solved numerically using Runge-Kutta (RK4) integration .","title":"\ud83d\udccc Step 1: Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-python-implementation-spacecraft-escape-simulation","text":"","title":"\ud83d\udcbb 2. Python Implementation: Spacecraft Escape Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#code-spacecraft-escape-from-earth","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants G = 6.674e-11 # Gravitational constant (m\u00b3/kg/s\u00b2) M_earth = 5.97e24 # Mass of Earth (kg) R_earth = 6.37e6 # Radius of Earth (m) v_escape = np.sqrt(2 * G * M_earth / R_earth) # Escape velocity (m/s) # Initial conditions r0 = R_earth # Start at Earth's surface v0 = 1.1 * v_escape # Slightly above escape velocity (scaled) t_max = 15000 # Simulation time in seconds # Define differential equations (dr/dt = v, dv/dt = -GM/r^2) def equations(t, y): r, v = y a = -G * M_earth / r**2 # Acceleration due to gravity return [v, a] # Solve using Runge-Kutta method t_span = (0, t_max) y0 = [r0, v0] # Initial position and velocity sol = solve_ivp(equations, t_span, y0, t_eval=np.linspace(0, t_max, 1000)) # Extract results time = sol.t radius = sol.y[0] / 1000 # Convert to km velocity = sol.y[1] / 1000 # Convert to km/s # Plot results fig, ax1 = plt.subplots(figsize=(8, 5)) # Plot radius over time ax1.plot(time, radius, 'b', label=\"Distance from Earth\") ax1.set_xlabel(\"Time (s)\") ax1.set_ylabel(\"Distance from Earth (km)\", color='b') ax1.tick_params(axis='y', labelcolor='b') # Create a second y-axis for velocity ax2 = ax1.twinx() ax2.plot(time, velocity, 'r', label=\"Velocity\") ax2.set_ylabel(\"Velocity (km/s)\", color='r') ax2.tick_params(axis='y', labelcolor='r') # Titles and legend plt.title(\"Spacecraft Escape Trajectory from Earth\") fig.tight_layout() plt.show()","title":"\ud83d\ude80 Code: Spacecraft Escape from Earth"},{"location":"1%20Physics/2%20Gravity/Problem_2/#_1","text":"","title":""},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-results-and-discussion","text":"","title":"\ud83d\udcca 3. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#graph-interpretation","text":"Blue curve : Distance from Earth increases over time \u2192 successful escape . Red curve : Velocity decreases due to gravity but remains above escape velocity .","title":"\ud83d\udd39 Graph Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#spacecraft-considerations","text":"If initial velocity is below \\( v_2 \\) , the spacecraft falls back. If velocity is exactly \\( v_2 \\) , it will asymptotically escape (speed \u2192 0 at infinity). Higher velocities reduce travel time but require more fuel.","title":"\ud83d\udd39 Spacecraft Considerations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-extending-to-interstellar-travel","text":"Once a spacecraft escapes Earth , it must also escape the Sun to leave the Solar System.","title":"\ud83d\udef8 4. Extending to Interstellar Travel"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-interstellar-escape","text":"\\[ v_3 = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\text{Earth}}}} \\] Using Sun\u2019s gravity at Earth\u2019s distance : [ approx 42.1 km/s ]","title":"\ud83d\udd39 Third Cosmic Velocity (Interstellar Escape)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-voyager-1","text":"Launched: 1977 Speed: 17.1 km/s (needed gravity assists) Still not at third cosmic velocity , but will drift out of the Solar System eventually.","title":"\ud83d\ude80 Example: Voyager 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/#5-gravity-assist-slingshot-effect","text":"Instead of using massive fuel, gravity assists use planetary motion to boost spacecraft speed.","title":"\ud83c\udf0d 5. Gravity Assist (Slingshot Effect)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#concept","text":"A spacecraft approaching a moving planet can \"steal\" some of its orbital energy : \\[ v_{\\text{final}} = v_{\\text{initial}} + 2 v_{\\text{planet}} \\]","title":"\ud83d\udd39 Concept"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-voyager-missions","text":"Used Jupiter & Saturn to gain speed. Saved tons of fuel , making deep-space missions possible.","title":"\ud83d\ude80 Example: Voyager Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#6-python-simulation-gravity-assist","text":"We'll model a spacecraft using Jupiter\u2019s gravity for a speed boost. # Jupiter parameters M_jupiter = 1.90e27 # kg R_jupiter = 6.99e7 # m v_jupiter = 13.1e3 # Jupiter's orbital velocity (m/s) r_flyby = R_jupiter + 5e7 # Flyby altitude # Initial velocity before encounter v_incoming = 10e3 # 10 km/s towards Jupiter # Calculate final velocity using gravity assist equation v_outgoing = v_incoming + 2 * v_jupiter # Print results print(f\"Incoming Velocity: {v_incoming / 1000:.2f} km/s\") print(f\"Outgoing Velocity (after slingshot): {v_outgoing / 1000:.2f} km/s\")","title":"\ud83d\udcbb 6. Python Simulation: Gravity Assist"},{"location":"1%20Physics/2%20Gravity/Problem_2/#7-results-and-discussion","text":"","title":"\ud83d\udcca 7. Results and Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#gravity-assist-interpretation","text":"Before encounter: 10 km/s After assist: ~36.2 km/s \ud83d\ude80 Boost of 26.2 km/s! (saving tons of fuel)","title":"\ud83d\udd39 Gravity Assist Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#applications-of-gravity-assists","text":"Used by Voyager, Cassini, New Horizons, Parker Solar Probe . Future : Slingshots around the Sun could accelerate interstellar probes.","title":"\ud83d\udd39 Applications of Gravity Assists"},{"location":"1%20Physics/2%20Gravity/Problem_2/#8-future-work-extensions","text":"Optimize slingshot maneuvers for Mars-Earth return missions. Simulate long-term trajectories (e.g., Starshot Probes). Model relativistic effects for high-speed interstellar travel.","title":"\ud83d\ude80 8. Future Work &amp; Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#final-thoughts","text":"We\u2019ve covered: \u2705 Escape trajectories \ud83c\udf0d \u2192 \ud83d\ude80 \u2705 Interstellar travel challenges \ud83d\ude80\ud83c\udf0c \u2705 Gravity assists for speed boosts \ud83d\ude80\u2728","title":"\ud83c\udf0c Final Thoughts"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}